image: ubuntu:eoan

stages:
  - Check
  - Test with GCC
  - Test with Clang
  - Build Documentation
  - Publish

.retry setting:
  retry:
    max: 2
    when: runner_system_failure

line count:
  extends: .retry setting
  stage: Check
  dependencies: []
  image: registry.gitlab.com/musicscience37_ci/cpp-base-image-docker:v1-1
  before_script:
    - mkdir -p temp
    - wget -O temp/cloc.pl
      https://github.com/AlDanial/cloc/releases/download/1.84/cloc-1.84.pl
  script:
    - mkdir -p line_count
    - perl temp/cloc.pl ./
      --exclude-dir=extern,temp,line_count
      --force-lang=C++,h
      --json --out=line_count/line_count.json
  artifacts:
    paths:
      - line_count
    expire_in: "3 mos"

doc:
  extends: .retry setting
  stage: Build Documentation
  needs: ["line count"]
  dependencies: []
  image: registry.gitlab.com/musicscience37_ci/sphinx-doxygen-docker:v1-2-1
  script:
    - mkdir build_doc
    - cmake -S ./ -B build_doc
      -DVARIANT_CPP11_BUILD_DOC:BOOL=ON
    - cmake --build build_doc --target variant_cpp11_doc
  artifacts:
    paths:
      - build_doc
    when: always
    expire_in: "3 mos"

static analysis:
  extends: .retry setting
  stage: Check
  dependencies: []
  image: registry.gitlab.com/musicscience37_ci/clang-ci-docker:clang9-v1-1
  before_script:
    - pip3 install junit2html
    - mkdir build_static_analysis
    - cd build_static_analysis
    - git clone https://github.com/PSPDFKit-labs/clang-tidy-to-junit.git
    - cd ../
  script:
    - cmake -S ./ -B build_static_analysis
      -DVARIANT_CPP11_ENABLE_CLANG_TIDY:BOOL=ON
      -DVARIANT_CPP11_TESTING:BOOL=ON
    - cmake --build build_static_analysis
      --target variant_cpp11_clang_tidy
    - scripts/check_clang_tidy.sh build_static_analysis/clang_tidy
  after_script:
    - cd build_static_analysis/clang_tidy
    - cat $(find $1 -name '*.txt') |
      python3 ../clang-tidy-to-junit/clang-tidy-to-junit.py $(dirname $(pwd)) > clang_tidy_junit.xml
    - python3 -m junit2htmlreport clang_tidy_junit.xml clang_tidy_junit.html
  artifacts:
    paths:
      - build_static_analysis
    reports:
      junit:
        - build_static_analysis/clang_tidy/clang_tidy_junit.xml
    when: always
    expire_in: "3 mos"

.release-test-base:
  extends: .retry setting
  needs: ["line count"]
  dependencies: []
  before_script:
    - pip3 install junitparser junit2html
    - chmod +xr /usr/local/bin/junitparser
  script:
    - mkdir $BUILD_DIR
    - cmake -S ./ -B $BUILD_DIR
      -DVARIANT_CPP11_TESTING:BOOL=ON
      -DVARIANT_CPP11_WRITE_JUNIT:BOOL=ON
    - cmake --build $BUILD_DIR
    - cd $BUILD_DIR
    - ctest -V .
  after_script:
    - scripts/collect_test_results.sh $BUILD_DIR/junit
  artifacts:
    paths:
      - $BUILD_DIR
    reports:
      junit:
        - $BUILD_DIR/junit/junit.xml
    when: always
    expire_in: "3 mos"

clang coverage:
  extends: .release-test-base
  stage: Test with Clang
  image: registry.gitlab.com/musicscience37_ci/clang-ci-docker:clang9-v1-0
  variables:
    BUILD_DIR: build_clang_coverage
  script:
    - mkdir $BUILD_DIR
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=Debug
      -DVARIANT_CPP11_TESTING:BOOL=ON
      -DVARIANT_CPP11_WRITE_JUNIT:BOOL=ON
      "-DCMAKE_CXX_FLAGS=-fprofile-instr-generate -fcoverage-mapping"
      "-DCMAKE_MODULE_LINKER_FLAGS=-fprofile-instr-generate -fcoverage-mapping"
    - cmake --build $BUILD_DIR
    - cd $BUILD_DIR
    - mkdir coverage
    - export LLVM_PROFILE_FILE=$(pwd)/coverage/coverage_%p.profraw
    - ctest -V .
    - cd ../
    - scripts/collect_llvm_coverage.sh build_clang_coverage
  coverage: '/Line Coverage: \d+\.\d+/'

gcc-8:
  extends: .release-test-base
  stage: Test with GCC
  image: registry.gitlab.com/musicscience37_ci/gcc-ci-docker:gcc8-v1-1
  variables:
    BUILD_DIR: build_gcc8

pages:
  extends: .retry setting
  stage: Publish
  only:
    - develop
  needs:
    - doc
  dependencies:
    - doc
  script:
    - mv build_doc/doc/doxygen/html public
  artifacts:
    paths:
      - public
    expire_in: "6 mos"
